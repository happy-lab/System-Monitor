#!/usr/bin/python3

import sys
import os
import time
import re
import signal
import threading
import logging
import datetime
import platform
import argparse
import traceback
import configparser
import subprocess
import json
import psutil
import mdstat
import paho.mqtt.client as mqtt


#
# Statistics collection interval.
#

interval = 15


#
# Last values to compute deltas.
#

last_diskstats = {}
last_netdev = {}
last_stats = {}
last_utilizations = {}
last_swap = {}


#
# Temperature sensor mapping.
#

temperature_sensors = {
        'cpu-thermal':       ['cpu-thermal', '/sys/devices/virtual/thermal/thermal_zone0/temp'],
        'lm75':              ['board',       '/dev/thermal-board/temp1_input'],
        'f10e4078.thermal':  ['cpu',         '/dev/thermal-cpu/temp1_input'],
        'f1072004mdiomii00': ['ethernet',    '/dev/thermal-eth/temp1_input']}


# 
# Pulse- Width Modulation fan mapping
#

fan_sensors = [ ['fan1', '/dev/fan-j10/pwm1'], ['fan2', '/dev/fan-j17/pwm1'] ]


#
# Save the number of CPUs.
#

cpu_count = psutil.cpu_count()


#
# Signal handling.
#

terminate = threading.Event()

def signal_handler(signum, frame):
    terminate.set()
    mqtt_client.disconnect()


#
# Compute the delay until the next interval boundary.
#

def delay(interval):
    return interval - (time.time() % interval)


#
# MQTT message and connection handlers.
#

def mqtt_on_connect(client, userdata, flags, rc):
    logger.debug('on_connect: userdata=%s rc=%d' % (userdata,  rc))

def mqtt_on_message(client, userdata, message):
    logger.debug('on_message: %s %s %d' %
                 (message.topic, message.payload.decode("utf-8"),
                  message.qos[0]))

def mqtt_on_publish(client, userdata, mid):
    logger.debug('on_publish: userdata=%s mid=%d' % (userdata, mid))

def mqtt_on_log(client, userdata, level, message):
    logger.debug('on_log: userdata=%s level=%s message=%s' %
                 (userdata, level, message))


#
# Collect system load statistics.
#

def loadavg():
    #load = psutil.getloadavg()   # Will work with psutil 5.6.2
    #load = {'load':  { '1':  load[0], '5':  load[1], '15': load[2]}}
    with open('/proc/loadavg', 'r') as loadavg:
        parts = loadavg.readline().strip().split(' ')
        running, sleeping = parts[3].split('/')
        last_pid = int(parts[4])
        load = { '1':  float(parts[0]), '5':  float(parts[1]), '15': float(parts[2])}
        processes = {'running': int(running),
                     'sleeping': int(sleeping)}
        return {'load': load, 'processes': processes}


#
# Collect memory statistics.
#

def meminfo():

    memory = { 'virtual': {}, 'swap': {} }

    virtual = psutil.virtual_memory()
    fields = [x for x in dir(virtual)
                  if not x.startswith('_') and
                     not callable(getattr(virtual, x)) and
                     x != 'percent']
    for field in fields:
        memory['virtual'][field] = getattr(virtual, field)

    def swap_delta(name, value):
        current = value
        if name in last_swap:
            value = value - last_swap[name]
        else:
            value = 0
        last_swap[name] = current
        return value

    swap = psutil.swap_memory()
    fields = [x for x in dir(swap)
                  if not x.startswith('_') and
                     not callable(getattr(swap, x)) and
                     x != 'percent']
    for field in fields:
        value = getattr(swap, field)
        if field == 'sin':
            value = swap_delta('sin', value)
        elif field == 'sout':
            value = swap_delta('sout', value)
        memory['swap'][field] = value

    return { 'memory': memory }


#
# Collect CPU utilizations.
#

def cpu_utilizations():

    global last_utilizations

    utilizations = {'percent': psutil.cpu_percent(),
                    'interval': interval}

    times = psutil.cpu_times()
    values = [x for x in dir(times)
                  if not x.startswith('_') and
                     not callable(getattr(times, x))]
    raw = {}
    for value in values:
        raw[value] = getattr(times, value)

    for statistic in last_utilizations:
        utilizations[statistic] = (raw[statistic] - last_utilizations[statistic]) / cpu_count

    last_utilizations = raw
    return {'cpu_utilizations': utilizations}


#
# Collect CPU statistics.
#

def cpu_statistics():

    global last_stats

    stats = psutil.cpu_stats()

    raw = {'context_switches': stats.ctx_switches,
           'interrupts':       stats.interrupts,
           'soft_interrupts':  stats.soft_interrupts}

    delta = {}
    for statistic in last_stats:
        delta[statistic] = raw[statistic] - last_stats[statistic]

    last_stats = raw
    return {'cpu_statistics': delta} if len(delta) != 0 else None


#
# Collect disk and pseudo-disk statistics.
#

def disk_statistics():

    global last_diskstats

    system = psutil.disk_io_counters()
    values = [x for x in dir(system)
                  if not x.startswith('_') and
                     not callable(getattr(system, x))]

    counters = psutil.disk_io_counters(perdisk=True)
    counters['all'] = system

    raw = {}
    for disk in counters:
        if not disk.startswith('loop'):
            raw[disk] = {}
            for value in values:
                raw[disk][value] = getattr(counters[disk], value)

    delta = {}
    for disk in last_diskstats:
        delta[disk] = {x: raw[disk][x] - last_diskstats[disk].get(x, 0) for x in raw[disk].keys()}
    last_diskstats = raw

    return {'diskstats': delta} if len(delta) != 0 else None


#
# Collect Linux RAID statistics.
#

def raid():
    return {'raid': mdstat.parse()}


#
# Collect network device statistics.
#

def netdev():

    global last_netdev

    counters = psutil.net_io_counters(pernic=True)
    loop = counters['lo']
    values = [x for x in dir(counters['lo'])
                  if not x.startswith('_') and
                     not callable(getattr(counters['lo'], x))]

    raw = {}
    for device in counters:
        raw[device] = {}
        for value in values:
            raw[device][value] = getattr(counters[device], value)

    delta = {}
    for device in last_netdev:
        delta[device] = {x: raw[device][x] - last_netdev[device].get(x, 0) for x in raw[device].keys()}

    last_netdev = raw
    return {'netdev': delta} if len(delta) != 0 else None


#
# Collect board status.
#

def status(now, interval):

    status = {'interval': interval,
              'system': system}

    boot_time = psutil.boot_time()
    status['uptime'] = int(now - psutil.boot_time())

    temperatures = {}
    sensors = psutil.sensors_temperatures()
    for sensor in sensors:
        if sensor in temperature_sensors:
            name = temperature_sensors[sensor][0]
        else:
            name = sensor
        current = sensors[sensor][0].current
        high = sensors[sensor][0].high if sensors[sensor][0].high else 0.0
        critical = sensors[sensor][0].critical if sensors[sensor][0].critical else 0.0
        temperatures[name] = {'current': current, 'high':  high, 'critical': critical}
    if len(temperatures) > 0:
        status['temperatures'] = temperatures

    # Following is helios4 specific; maybe something using 'lm_sensors'.
    fans = {}
    for fan in fan_sensors:
        if os.path.exists(fan[1]):
            with open(fan[1]) as sensor:
                value = float(sensor.read())
                fans[fan[0]] = {'current': value, 'duty%': round((value / 255.0) * 100.0, 1)}
    if len(fans) > 0:
        status['fans'] = fans

    return {'status': status}


#
# Collect file system statistics.
#

def filesystems():
    filesystems = {}
    partitions = psutil.disk_partitions()
    for partition in partitions:
        usage = psutil.disk_usage(partition.mountpoint)
        filesystems[partition.mountpoint] = {'device': partition.device,
                                             'size': usage.total,
                                             'used': usage.used,
                                             'used%': usage.percent,
                                             'available': usage.free}
    return {'filesystems': filesystems}


#
# Take the collected statistics dictionaries and merge them into a single one.
#

def merge_dictionaries(*dictionaries):
    '''
    Given any number of dictionaries, shallow copy and merge into a
    new dictionary, precedence goes to key value pairs in latter
    dictionaries.
    '''
    result = {}
    for dictionary in dictionaries:
        if dictionary:
            result.update(dictionary)
    return result


#
# Main collection function.
#

def collect():

    now = datetime.datetime.now(datetime.timezone.utc)
    timestamp = now.timestamp()

    results = []
    results.append({'timestamp': now.strftime('%Y-%m-%dT%H:%M:%S.%fZ')})
    results.append(status(timestamp, interval))
    results.append(loadavg())
    results.append(meminfo())
    results.append(cpu_utilizations())
    results.append(cpu_statistics())
    results.append(filesystems())
    results.append(disk_statistics())
    results.append(raid())
    results.append(netdev())

    elapsed = time.time() - timestamp
    logger.debug('collect: elapsed time - ' + str(round(elapsed, 6)))

    return results


#
# Main routine.
#

if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='Linux System Monitor Data Collector')
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='Use verbose logging.')
    parser.add_argument('-c', '--file', action='store',
                        default='/etc/sensors/system_monitor.conf',
                        help='Configuration file.')
    arguments = parser.parse_args()

    configuration = configparser.ConfigParser()
    configuration.read(arguments.file)

    system = platform.node()
    interval = int(configuration['collector'].get('interval', '15'))

    level = int(configuration['logging'].get('level', '40'))
    logger = logging.getLogger(__name__)
    handler = logging.StreamHandler(sys.stdout)
    handler.setFormatter(logging.Formatter('%(asctime)s %(message)s'))
    logger.addHandler(handler)
    logger.setLevel(level)

    mqtt_topic = configuration['mqtt'].get('topic', 'home/system')
    mqtt_host = configuration['mqtt'].get('host', 'localhost')
    mqtt_port = int(configuration['mqtt'].get('port', '1883'))
    mqtt_client = mqtt.Client(system + ':system_monitor' , True)
    mqtt_client.on_message = mqtt_on_message
    mqtt_client.on_connect = mqtt_on_connect
    mqtt_client.on_publish = mqtt_on_publish
    #mqtt_client.on_log = mqtt_on_log
    mqtt_client.loop_start()
    mqtt_client.connect(mqtt_host, mqtt_port, 60)

    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    time.sleep(delay(interval))
    collect()

    while not terminate.wait(delay(interval)):
        data = collect()
        contents = merge_dictionaries(*data)
        message = json.dumps(contents)
        mqtt_client.publish(mqtt_topic + '/' + system, message)

    logger.info('Terminating')
    sys.exit(0)
